<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Tanja Obradovic: Jakarta EE Community Engagement</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6695 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/jakarta-ee-community-engagement</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/NUmtGPqGwhz-c6FEc7h9imIdBlir0aVqUsXTAdtzG44uCm3qUxkHnuPxXVdS20weW4iJLpFtNPCyW1xvtAJsWf4_X-AuSnAZV14SeLwOTeJCBffRyqO4mmEa3TkNuRvL6nZKtN_h&quot; style=&quot;height: 223px; width: 624px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The intention of the blog is to list all the ways we currently (May 2019) engage with the community.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Social media&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Jakarta EE on social media&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Twitter: @JakartaEE&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Facebook: Jakarta EE&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;LinkedIn Group: Jakarta.EE&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Mailing lists&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Subscribe to our mailing-lists&lt;a href=&quot;https://jakarta.ee/connect/&quot;&gt; https://jakarta.ee/connect/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:jakarta.ee-community@eclipse.org&quot;&gt;jakarta.ee-community@eclipse.org&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;http:// jakarta.ee-wg@eclipse.org&quot;&gt;jakarta.ee-wg@eclipse.org &lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Note: people involved in a specific project have additional mailing lists available to them.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Newsletter / Blogs / emails&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Eclipse Newsletter&lt;/em&gt; - while the EF newsletter occurs monthly, once a quarter the newsletter is dedicated to Jakarta EE&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Jakarta Blogs&lt;/em&gt; - &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;https://jakartablogs.ee/&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;In addition to the above Jakarta blogs that are covering all Java Cloud related topics, we are adding the following&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;New &lt;/strong&gt;community &lt;u&gt;blogs on “how are you involved with Jakarta EE”&lt;/u&gt; - &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1JflN_xJ9d5ZWu5VUbDV9Spj7mc8WuPGMfd6EZgabXz0/edit?usp=sharing&quot;&gt;sign up sheet to the community, ideal frequency bi-weekly blogs&lt;/a&gt;, we’d  like to ensure we promote via Eclipse Foundation and other members marketing channels&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;New &lt;/strong&gt;&lt;u&gt;monthly update emails&lt;/u&gt; to &lt;a href=&quot;mailto:jakarta.ee-community@eclipse.org&quot;&gt;jakarta.ee-community@eclipse.org&lt;/a&gt;, highlighting news from the various calls, Eclipse Foundation to the community&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Meetings&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Jakarta Tech Talks &lt;/em&gt;- open to community &lt;a href=&quot;mailto:jakarta.ee-community@eclipse.org&quot;&gt;jakarta.ee-community@eclipse.org&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.meetup.com/jakartatechtalks_/&quot;&gt;Jakarta Tech Talk MeetUp Link &lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Monthly occurrence, last week of a month, usually Tuesday&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/19AfvCUdScUHwJejMYg370tum5mi7zI4bvkZczcQXiUM/edit?usp=sharing&quot;&gt;Jakarta Tech Talk schedule and talks suggestions spreadsheet&lt;/a&gt; - please sign up / propose a talk&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;This is a live stream with recording available on youtube&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;30-40 min technical talk by the community&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;This is also an opportunity for 10-15 min update on Jakarta EE from Eclipse Foundation&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Jakarta EE Update&lt;/em&gt; (formerly: Jakarta EE WG) calls - open to WG &lt;a href=&quot;http:// jakarta.ee-wg@eclipse.org&quot;&gt;jakarta.ee-wg@eclipse.org &lt;/a&gt; and wider community  &lt;a href=&quot;mailto:jakarta.ee-community@eclipse.org&quot;&gt;jakarta.ee-community@eclipse.org&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;The meeting invite is in the new public calendar &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=eclipse-foundation.org_3281qms6riu4kdf354jn5idon0%40group.calendar.google.com&amp;amp;ctz=America%2FToronto&quot;&gt;Jakarta EE Community Calendar &lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;This is a monthly occurrence, every second Wednesday of the month (avoiding the same week as Jakarta Tech Talks)&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;This meeting is to be prepared and organized by the Jakarta EE Working Group members and &lt;a href=&quot;https://docs.google.com/document/d/1U81TZ2F_nhg6WxoE1VnpUUEQ09r8SXWpaN3hf3wiTWQ/edit?usp=sharing&quot;&gt;agenda to be shared with the community &lt;/a&gt;prior to the call&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Use the time slot for occasional updates from Eclipse Foundation and strategic members (Executive Director and panel)  - Jakarta Town Hall&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Jakarta Town Hall&lt;/em&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We had 2 very successful instances of town hall meetings - first at EclipseCon Europe 2018 and A year in review in late January 2019&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;EF organized Events and Conferences&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;JakartaOne Live - virtual one-day event, targeting users and adopters. Planned for the second week of September 2019.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;EclipseCon Europe - 4-day Eclipse event, with dedicated Cloud Native Java track, community day event scheduled, likely Jakarta Town Hall.  Scheduled for October 21-24, 2019.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee&quot;&gt;#JakartaEE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource&quot;&gt;#OpenSource&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community-0&quot;&gt;#community&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community-engagement&quot;&gt;#community-engagement&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/get-involved&quot;&gt;#get-involved&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 02 May 2019 17:35:40 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Code Duplication</title>
	<guid isPermaLink="false">https://medium.com/p/1e1f759a7fe3</guid>
	<link>https://medium.com/@donraab/code-duplication-1e1f759a7fe3?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Duplicate code makes me itch, until I scratch it away.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*fLJUnvCEnjFcNLhc5Wbgqg.jpeg&quot; /&gt;Itchy scratchy hay!&lt;/figure&gt;&lt;h3&gt;I hate code duplication&lt;/h3&gt;&lt;p&gt;Nothing bothers me quite like code duplication. I get an unbearable itch every time I spot some duplication in a code base. The only way to make the itch go away is to find a suitable way to remove the duplication.&lt;/p&gt;&lt;p&gt;I am always reminded of this quote from a &lt;a href=&quot;https://groups.yahoo.com/neo/groups/testdrivendevelopment/conversations/topics/185?viscount=100&quot;&gt;Yahoo Groups post from Ryan King&lt;/a&gt; many years ago when I spot code duplication.&lt;/p&gt;&lt;blockquote&gt;So, duplication sucks. The more rabidly a person hates duplication, the more I trust their opinions on managing information. A programmer, upon noticing some redundancy, should be thrown into a panic, begin hyperventilating, and stammer something about “¡El diablo! !El diablo está en mi software!”.&lt;/blockquote&gt;&lt;blockquote&gt;— Ryan King&lt;/blockquote&gt;&lt;p&gt;So what can we do when we find code duplication? We can learn ways to remove it. Google and StackOverflow are great resources for finding answers to solving many common programming problems. They can be your first port of call for discovering and learning new APIs that may help reduce some of the duplicate code you may have written previously.&lt;/p&gt;&lt;h3&gt;Simple patterns of duplication&lt;/h3&gt;&lt;p&gt;Sometimes code duplication is easy to spot and to remove. I will start by describing some very simple common patterns of duplication I spot in code bases all the time.&lt;/p&gt;&lt;h4&gt;Boolean Test Pattern&lt;/h4&gt;&lt;p&gt;Testing a boolean value and returning true or false. I’ve seen this pattern of code more than you might imagine over the years.&lt;/p&gt;&lt;pre&gt;public boolean isSomething()&lt;br /&gt;{&lt;br /&gt;    if (!this.calculateSomeBooleanValue())&lt;br /&gt;    {&lt;br /&gt;        return true;&lt;br /&gt;    }&lt;br /&gt;    else&lt;br /&gt;    {&lt;br /&gt;        return false;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Write this instead.&lt;/p&gt;&lt;pre&gt;public boolean isSomething()&lt;br /&gt;{&lt;br /&gt;    return !this.calculateSomeBooleanValue();&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Collection Factory Pattern&lt;/h4&gt;&lt;p&gt;Here’s another simple pattern that can be fixed easily. This kind of code is very commonly written in test cases. It is important to address code duplication issues across your entire code base, including tests.&lt;/p&gt;&lt;pre&gt;List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&lt;br /&gt;list.add(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;);&lt;br /&gt;list.add(&lt;strong&gt;&quot;two&quot;&lt;/strong&gt;);&lt;br /&gt;list.add(&lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;p&gt;This code can be replaced as follows using Eclipse Collections &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;mutable factory pattern&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;List&amp;lt;String&amp;gt; list = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;p&gt;Here’s an answer on StackOverflow that show different &lt;a href=&quot;https://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line/28183168#28183168&quot;&gt;ways to initialize a List, Set, and Bag in one line with Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;Unmodifiable Static Collection Initializer Pattern&lt;/h4&gt;&lt;p&gt;The following code used to be common in Java versions prior to Java 9, for creating a static unmodifiable List.&lt;/p&gt;&lt;pre&gt;public static final List&amp;lt;String&amp;gt; &lt;em&gt;LIST&lt;/em&gt;;&lt;br /&gt;&lt;br /&gt;static&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;String&amp;gt; newList = new ArrayList&amp;lt;&amp;gt;();&lt;br /&gt;    newList.add(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;);&lt;br /&gt;    newList.add(&lt;strong&gt;&quot;two&quot;&lt;/strong&gt;);&lt;br /&gt;    newList.add(&lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;br /&gt;    &lt;em&gt;LIST &lt;/em&gt;= Collections.&lt;em&gt;unmodifiableList&lt;/em&gt;(newList);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This can be written more simply as follows using plain old Java.&lt;/p&gt;&lt;pre&gt;public static final List&amp;lt;String&amp;gt; &lt;strong&gt;&lt;em&gt;LIST &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;        Collections.&lt;em&gt;unmodifiableList&lt;/em&gt;(&lt;br /&gt;                Arrays.&lt;em&gt;asList&lt;/em&gt;(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;This can also be replaced as follows using Eclipse Collections.&lt;/p&gt;&lt;pre&gt;public static final List&amp;lt;String&amp;gt; LIST =&lt;br /&gt;        Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;).asUnmodifiable();&lt;/pre&gt;&lt;p&gt;As of Java 9, you can also write the following. The method List.of() returns an unmodifiable List.&lt;/p&gt;&lt;pre&gt;public static final List&amp;lt;String&amp;gt; LIST = &lt;br /&gt;        List.&lt;em&gt;of&lt;/em&gt;(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;p&gt;You can also use an ImmutableList from Eclipse Collections if you want to have a contractually immutable interface like ImmutableList which has no mutating methods.&lt;/p&gt;&lt;pre&gt;public static final ImmutableList&amp;lt;String&amp;gt; LIST = &lt;br /&gt;        Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;h4&gt;Static Map Initializer Pattern&lt;/h4&gt;&lt;p&gt;Initializing a static Map can be a bit more challenging, if you have more than three or four key/value pairs in the Map.&lt;/p&gt;&lt;pre&gt;public static final Map&amp;lt;Integer, String&amp;gt; &lt;strong&gt;&lt;em&gt;MAP&lt;/em&gt;&lt;/strong&gt;;&lt;br /&gt;&lt;br /&gt;static&lt;br /&gt;{&lt;br /&gt;    Map&amp;lt;Integer, String&amp;gt; newMap = new HashMap&amp;lt;&amp;gt;();&lt;br /&gt;    newMap.put(1, &lt;strong&gt;&quot;one&quot;&lt;/strong&gt;);&lt;br /&gt;    newMap.put(2, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;);&lt;br /&gt;    newMap.put(3, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;br /&gt;    newMap.put(4, &lt;strong&gt;&quot;four&quot;&lt;/strong&gt;);&lt;br /&gt;    newMap.put(5, &lt;strong&gt;&quot;five&quot;&lt;/strong&gt;);&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;MAP &lt;/em&gt;&lt;/strong&gt;= Collections.&lt;em&gt;unmodifiableMap&lt;/em&gt;(newMap);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Refactored to use an Eclipse collections unmodifiable map.&lt;/p&gt;&lt;pre&gt;public static final Map&amp;lt;Integer, String&amp;gt; &lt;strong&gt;&lt;em&gt;MAP &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;        Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.&amp;lt;Integer, String&amp;gt;empty()&lt;br /&gt;                .withKeyValue(1, &lt;strong&gt;&quot;one&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(2, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(3, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(4, &lt;strong&gt;&quot;four&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(5, &lt;strong&gt;&quot;five&quot;&lt;/strong&gt;)&lt;br /&gt;                .asUnmodifiable();&lt;/pre&gt;&lt;p&gt;Refactored to use an Eclipse collections ImmutableMap which also has no mutating methods in its interface.&lt;/p&gt;&lt;pre&gt;public static final ImmutableMap&amp;lt;Integer, String&amp;gt; &lt;strong&gt;&lt;em&gt;MAP &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;        Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.&amp;lt;Integer, String&amp;gt;empty()&lt;br /&gt;                .withKeyValue(1, &lt;strong&gt;&quot;one&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(2, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(3, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(4, &lt;strong&gt;&quot;four&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(5, &lt;strong&gt;&quot;five&quot;&lt;/strong&gt;)&lt;br /&gt;                .toImmutable();&lt;/pre&gt;&lt;p&gt;Here’s a an answer on StackOverflow that shows various &lt;a href=&quot;https://stackoverflow.com/questions/507602/how-can-i-initialise-a-static-map/13943037#13943037&quot;&gt;ways to initialize a static map with Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Iteration Patterns&lt;/h3&gt;&lt;p&gt;One of the primary reasons I started building &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; was that I would see developers writing the same for-loops over and over again. Developers were constantly reimplementing collection iteration patterns in Java. I saw code duplication everywhere! Developers did this prior to Java 8 because the iteration patterns available to Java developers then were limited to what could be found on the Collections utility class. Eclipse Collections has been in development and used in production since JDK 1.4. &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; has been my preferred solution for removing duplicate iteration pattern code for the past fifteen years in Java.&lt;/p&gt;&lt;h4&gt;Filter Pattern&lt;/h4&gt;&lt;p&gt;Prior to Java 8, the following was the usual way of filtering a source collection to a target collection based on some condition.&lt;/p&gt;&lt;pre&gt;List&amp;lt;Integer&amp;gt; source = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;List&amp;lt;Integer&amp;gt; target = new ArrayList&amp;lt;&amp;gt;();&lt;br /&gt;for (Integer value : source)&lt;br /&gt;{&lt;br /&gt;    if (value % 2 == 0)&lt;br /&gt;    {&lt;br /&gt;        target.add(value);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here’s the same code refactored using the Eclipse Collections select method.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;Integer&amp;gt; source = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5);&lt;br /&gt;MutableList&amp;lt;Integer&amp;gt; target = source.select(each -&amp;gt; each % 2 ==0);&lt;/pre&gt;&lt;p&gt;Here’s an &lt;a href=&quot;https://stackoverflow.com/questions/122105/what-is-the-best-way-to-filter-a-java-collection/12573823#12573823&quot;&gt;answer&lt;/a&gt; on StackOverflow to the question of “What is the best way to filter a Java Collection?”&lt;/p&gt;&lt;h4&gt;Transform Pattern&lt;/h4&gt;&lt;p&gt;Prior to Java 8, the following was the typical way of converting one collection type to another.&lt;/p&gt;&lt;pre&gt;List&amp;lt;Integer&amp;gt; source = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;List&amp;lt;String&amp;gt; target = new ArrayList&amp;lt;&amp;gt;();&lt;br /&gt;for (Integer value : source)&lt;br /&gt;{&lt;br /&gt;    target.add(value.toString());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here’s the same code refactored using the Eclipse Collections collect method.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;Integer&amp;gt; source = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5);&lt;br /&gt;MutableList&amp;lt;String&amp;gt; target = source.collect(Object::toString);&lt;/pre&gt;&lt;h4&gt;Any / All / None Patterns&lt;/h4&gt;&lt;p&gt;Prior to Java 8, you would either use a break statement with a boolean variable or a direct return from inside an if statement to see if any, all, or none of the elements of a collection match a given condition.&lt;/p&gt;&lt;h4&gt;Any Pattern&lt;/h4&gt;&lt;pre&gt;List&amp;lt;Integer&amp;gt; source = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;boolean &lt;strong&gt;anyEvens &lt;/strong&gt;= false;&lt;br /&gt;for (Integer value : source)&lt;br /&gt;{&lt;br /&gt;    if (value % 2 == 0)&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;anyEvens &lt;/strong&gt;= true;&lt;br /&gt;        break;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Refactored with Eclipse Collections anySatisfy method.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;Integer&amp;gt; source = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5);&lt;br /&gt;boolean anyEvens = source.anySatisfy(each -&amp;gt; each % 2 == 0);&lt;/pre&gt;&lt;h4&gt;All Pattern&lt;/h4&gt;&lt;pre&gt;List&amp;lt;Integer&amp;gt; source = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;boolean &lt;strong&gt;allEvens &lt;/strong&gt;= true;&lt;br /&gt;for (Integer value : source)&lt;br /&gt;{&lt;br /&gt;    if (value % 2 != 0)&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;allEvens &lt;/strong&gt;= false;&lt;br /&gt;        break;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Refactored with Eclipse Collections allSatisfy method.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;Integer&amp;gt; source = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5);&lt;br /&gt;boolean allEvens = source.allSatisfy(each -&amp;gt; each % 2 == 0);&lt;/pre&gt;&lt;h4&gt;None Pattern&lt;/h4&gt;&lt;pre&gt;List&amp;lt;Integer&amp;gt; source = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;boolean &lt;strong&gt;noneEvens &lt;/strong&gt;= true;&lt;br /&gt;for (Integer value : source)&lt;br /&gt;{&lt;br /&gt;    if (value % 2 == 0)&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;noneEvens &lt;/strong&gt;= false;&lt;br /&gt;        break;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Refactored with Eclipse Collections noneSatisfy method.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;Integer&amp;gt; source = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5);&lt;br /&gt;boolean noneEvens = source.noneSatisfy(each -&amp;gt; each % 2 == 0);&lt;/pre&gt;&lt;h4&gt;Other Iteration Patterns&lt;/h4&gt;&lt;p&gt;There are many other iteration patterns available in Eclipse Collections that can help you remove duplicate code. There are over one hundred variations of iteration patterns and other APIs available on the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html&quot;&gt;&lt;em&gt;RichIterable&lt;/em&gt;&lt;/a&gt; parent interface alone.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Br4eQEhSsLeRZ1EVZIHhPA.png&quot; /&gt;RichIterable APIs&lt;/figure&gt;&lt;h3&gt;Sometimes code duplication is necessary&lt;/h3&gt;&lt;p&gt;Occasionally code duplication is the best available solution to solve a performance problem. A great example in Eclipse Collections is the primitive collections. Eclipse Collections has primitive collection support for Lists, Sets, Bags, Stacks and Maps for all eight primitive combinations (boolean, byte, char, double, float, int, long, short). The code to implement all of these container types is nearly identical. So if you read the code for an IntArrayList it will look eerily similar to the code in ShortArrayList and LongArrayList. What is important in cases where you want to provide library support for primitive types in Java is to leverage a code generation strategy wherever possible and to not duplicate the code by hand. With Eclipse Collections, we use the &lt;a href=&quot;https://www.stringtemplate.org/&quot;&gt;StringTemplate&lt;/a&gt; library and write templates once for each container type that are then used to generate the eight container types required to support all of the primitives.&lt;/p&gt;&lt;p&gt;In the future, if the work in &lt;a href=&quot;https://openjdk.java.net/projects/valhalla/&quot;&gt;Project Valhalla&lt;/a&gt; becomes part of a JDK release and we get support for generic specialization over primitive types, we may have new language level strategies in Java to reduce the amount of generated code we have to produce today to support primitive types. I am very excited to see how this support may potentially reduce our code duplication burden.&lt;/p&gt;&lt;h3&gt;Additional Patterns of Duplication&lt;/h3&gt;&lt;p&gt;There are a lot more patterns of duplication out there. Your IDE and various code analysis tools can sometimes help you find the obvious ones caused by copy and paste. Other times you may just need to read your code and see if you can recognize patterns where some code is going into too much detail about &lt;strong&gt;how&lt;/strong&gt; to do something (for loops are sometimes a cue). Code that is written well should tell you clearly &lt;strong&gt;what&lt;/strong&gt; it is doing, not how it is doing it.&lt;/p&gt;&lt;p&gt;Deleting duplicate code makes me feel very satisfied. It helps reduce the total cost of ownership for a an application or library. Less code to read, test, maintain, and deploy means less potential bugs to discover, debug and fix.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=1e1f759a7fe3&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 01 May 2019 03:49:42 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: Ways your company can support and sustain open source</title>
	<guid isPermaLink="false">https://www.aniszczyk.org/?p=4282</guid>
	<link>https://www.aniszczyk.org/2019/04/30/ways-your-company-can-support-and-sustain-open-source/</link>
	<description>&lt;p&gt;&lt;em&gt;Note: this article was original posted on &lt;/em&gt;&lt;a href=&quot;https://opensource.com/article/19/4/ways-support-sustain-open-source&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;https://opensource.com/article/19/4/ways-support-sustain-open-source&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make sure open source continues to thrive, we all need to find ways to sustain the communities and projects we depend on&lt;/p&gt;
&lt;p&gt;The success of open source continues to grow; surveys show that the &lt;a href=&quot;https://www.slideshare.net/blackducksoftware/2016-future-of-open-source-survey-results&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;majority of companies&lt;/a&gt;use some form of open source, &lt;a href=&quot;https://www.redhat.com/cms/managed-files/rh-enterprise-open-source-ebook-f16984bf-201904-en_0.pdf&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;99% of enterprises see open source as important&lt;/a&gt;, and &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018#developer-profile-_-contributing-to-open-source&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;almost half of developers&lt;/a&gt; are contributing back. It’s important to note that companies aren’t contributing to open source for purely altruistic reasons. Recent &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3091831&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;research&lt;/a&gt; from Harvard shows that open source-contributing companies capture up to 100% more productive value from open source than companies that do not contribute back. Another research &lt;a href=&quot;https://hbswk.hbs.edu/item/government-technology-policy-social-value-and-national-competitiveness&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;study&lt;/a&gt; concluded countries adopting modern open source practices saw:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“a 0.6%–5.4% yearly increase in companies that use OSS, a 9%–18% yearly increase in the number of IT-related startups, a 6.6%–14% yearly increase in the number of individuals employed in IT related jobs, and a 5%–16% yearly decrease in software-related patents. All of these outcomes help to increase productivity and competitiveness at the national level. In aggregate, these results show that changes in government technology policy that favor OSS can have a positive impact on both global social value and domestic national competitiveness.”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the end, there are many ways for a company or organization to sustain open source. It could be as simple as training your organization to contribute to open source projects you depend on or hiring engineers to work on open source projects. Here are eight ways your organization can contribute back to open source, based on examples in the industry.&lt;/p&gt;
&lt;h2&gt;Hire open source maintainers to work on open source&lt;/h2&gt;
&lt;p&gt;Companies with strategies to leverage open source often find the highest returns from hiring a maintainer of the projects they depend the most on. It’s no surprise if you look at the &lt;a href=&quot;https://www.linuxfoundation.org/2017-linux-kernel-report-landing-page/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Who Writes the Linux Kernel report&lt;/a&gt; that the top contributors are all employed by companies like ARM, Google, Facebook, Intel, Red Hat, Samsung, and more.&lt;/p&gt;
&lt;p&gt;Having a maintainer (full time or part time) on your staff can help your organization learn how to work within the project community and enable prioritization of upstream contributions based on understanding of what the community is focused on. Hiring the maintainers also means that the project will have people with enough time to focus on the details and the rigor that’s needed for a project to be useful; think security reviews, bug cleanup, release management, and more. A more predictable and reliable upstream project can benefit many in your organization while also improving the overall project community. As a bonus, maintainers can also become advocates for your organization and help with recruiting too!&lt;/p&gt;
&lt;h2&gt;Develop an open source award program or peer bonus fund&lt;/h2&gt;
&lt;p&gt;It is common for companies to have internal employee recognition programs that recognize individuals who go above and beyond. As an example, Red Hat has a &lt;a href=&quot;https://opensource.com/article/19/2/community-awards-2019&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;community award program&lt;/a&gt; through Opensource.com. Some other companies have expanded their recognition programs to include open source contributors. For example, Google has an &lt;a href=&quot;https://opensource.google.com/docs/growing/peer-bonus/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;open source peer bonus program&lt;/a&gt; that recognizes external people who have made exceptional contributions to open source.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Congratulations to our Open Source Peer Bonus winners! &lt;a href=&quot;https://t.co/LA1MsnsSQf&quot;&gt;https://t.co/LA1MsnsSQf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Google Open Source (@GoogleOSS) &lt;a href=&quot;https://twitter.com/GoogleOSS/status/1121825826939424768?ref_src=twsrc%5Etfw&quot;&gt;April 26, 2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Start an open source program office&lt;/h2&gt;
&lt;p&gt;Many internet-scale companies, including Amazon, Google, Facebook, Twitter and more, have &lt;a href=&quot;https://opensource.com/article/18/1/how-start-open-source-program-your-company&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;established formal open source programs&lt;/a&gt; (colloquially called OSPOs) within their organizations to manage open source strategy along with the consumption and contribution of open source.&lt;/p&gt;
&lt;p&gt;If you want to increase your contributions to open source, &lt;a href=&quot;https://github.com/todogroup/survey/tree/master/2018#companies-with-an-open-source-program-more-likely-to-contribute&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;research&lt;/a&gt; has shown that companies with formal open source programs are more likely to contribute back. If you want to learn from organizations with formal open source programs, I recommend you read the &lt;a href=&quot;https://todogroup.org/guides/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;TODO Group Open Source Program Guides&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Launch an open source fund&lt;/h2&gt;
&lt;p&gt;Some organizations contribute fiscally to the open source projects that are important to them. For example, Comcast’s &lt;a href=&quot;https://innovationfund.comcast.com/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Open Source Development Grants&lt;/a&gt; “are intended to fund new or continued development of open source software in areas of interest to Comcast or of benefit to the Internet and broadband industries.” This isn’t just for big companies; small companies have open source funds, too. For example, CarGurus launched an &lt;a href=&quot;https://www.cargurus.com/press/cargurus_engineers_launch_open_source_fund.html&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;open source fund&lt;/a&gt; and &lt;a href=&quot;https://blog.geteventbot.com/2019/01/06/how-we-support-open-source-software.html&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eventbot&lt;/a&gt; is supporting open source with a small percentage of its company revenue. Another interesting approach is what Indeed has done by &lt;a href=&quot;https://fosdem.org/2019/schedule/event/community_sustaining_foss_projects_democratizing_sponsorship/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;democratizing the open source funding process&lt;/a&gt; with its employees.&lt;/p&gt;
&lt;h2&gt;Contribute a portion of your company equity to open source&lt;/h2&gt;
&lt;p&gt;Consider donating a portion of your organization’s equity to an open source project you depend on. For example, Citus Data recently &lt;a href=&quot;https://www.citusdata.com/blog/2018/10/24/why-citus-data-is-donating-1-percent-equity/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;donated one percent of its equity&lt;/a&gt; to the PostgreSQL community. This worked out nicely; Citus Data was acquired by Microsoft recently, so the PostgreSQL community will benefit from that acquisition, too.&lt;/p&gt;
&lt;h2&gt;Support and join open source foundations&lt;/h2&gt;
&lt;p&gt;There are many open source foundations that house open source projects your organization depends on, including the &lt;a href=&quot;https://apache.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Apache Foundation&lt;/a&gt;, &lt;a href=&quot;https://eclipse.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation&lt;/a&gt;, &lt;a href=&quot;https://cncf.io/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; (home of Kubernetes), &lt;a href=&quot;https://graphql.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;GraphQL Foundation&lt;/a&gt;, &lt;a href=&quot;https://letsencrypt.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Let’s Encrypt&lt;/a&gt;, &lt;a href=&quot;https://www.linuxfoundation.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Linux Foundation&lt;/a&gt;, &lt;a href=&quot;https://opensource.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Open Source Initiative&lt;/a&gt; (OSI), &lt;a href=&quot;https://openstack.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;OpenStack Foundation&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;NodeJS Foundation&lt;/a&gt;, and more.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;CNCF's Annual Report just published &amp;amp; it's packed with stats around the Foundation's growth, &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; data, &lt;a href=&quot;https://twitter.com/hashtag/cloudnative?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#cloudnative&lt;/a&gt; project updates + maintainer satisfaction, ecosystem tools like &lt;a href=&quot;https://twitter.com/hashtag/DevStats?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#DevStats&lt;/a&gt; &amp;amp; more! Make sure to check it out &lt;img alt=&quot;📄&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11.2.0/72x72/1f4c4.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;img alt=&quot;☁&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11.2.0/72x72/2601.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;img alt=&quot;➡&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11.2.0/72x72/27a1.png&quot; style=&quot;height: 1em;&quot; /&gt; &lt;a href=&quot;https://t.co/9E1mpmzTf5&quot;&gt;https://t.co/9E1mpmzTf5&lt;/a&gt; &lt;a href=&quot;https://t.co/5euDVnPnMC&quot;&gt;pic.twitter.com/5euDVnPnMC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— CNCF (@CloudNativeFdn) &lt;a href=&quot;https://twitter.com/CloudNativeFdn/status/1092544807900110848?ref_src=twsrc%5Etfw&quot;&gt;February 4, 2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Fund and participate in open source internships or retreats&lt;/h2&gt;
&lt;p&gt;There are many open source internship programs that you can participate in and help fund. &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Google Summer of Code&lt;/a&gt; (GSoC) is the largest, and it requires mentorship from employees who work on open source projects as part of the program. Or you can sponsor internships for underrepresented minorities in open source through &lt;a href=&quot;https://www.outreachy.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Outreachy&lt;/a&gt; and &lt;a href=&quot;https://communitybridge.org/faq/#people&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;CommunityBridge&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Introducing CommunityBridge, a platform to accelerate innovation, sustainability, funding, security, mentoring, and diversity in open source projects. Join the private early access program: &lt;a href=&quot;https://t.co/22eGhqNbCt&quot;&gt;https://t.co/22eGhqNbCt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— The Linux Foundation (@linuxfoundation) &lt;a href=&quot;https://twitter.com/linuxfoundation/status/1105581918278635521?ref_src=twsrc%5Etfw&quot;&gt;March 12, 2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Another approach is to host an open source retreat at your company. For example, &lt;a href=&quot;https://stripe.com/blog/stripe-open-source-retreat&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Stripe hosts open source retreats&lt;/a&gt; to contribute to open source projects it depends on.&lt;/p&gt;
&lt;h2&gt;Include open source in your corporate philanthropy initiatives&lt;/h2&gt;
&lt;p&gt;If your organization has a corporate sustainability or philanthropic arm, consider working with that team to include open source as a part of its work. For example, &lt;a href=&quot;https://events.linuxfoundation.org/wp-content/uploads/2017/12/Software-Philanthropy-for-Everyone-Kevin-P.-Fleming-Bloomberg.pdf&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Bloomberg has a software philanthropy budget&lt;/a&gt; for projects it depends on, from Git to Eclipse to Python and more. In the future, I hope to see more &lt;a href=&quot;https://en.wikipedia.org/wiki/Corporate_sustainability&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;corporate sustainability&lt;/a&gt; and philanthropy efforts—like &lt;a href=&quot;https://pledge1percent.org/&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Pledge 1%&lt;/a&gt;—that focus on funding critical open source infrastructure.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, giving back to open source is not only the right thing to do, according to research, it’s also good for your business. To make sure open source continues to thrive and is sustainable in the long run, we all need to ensure that companies find ways to sustain the open source communities they depend on.&lt;/p&gt;</description>
	<pubDate>Tue, 30 Apr 2019 13:49:22 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Ditto Milestone 0.9.0-M2</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2019-04-29-milestone-announcement-090-M2.html</guid>
	<link>https://www.eclipse.org/ditto/2019-04-29-milestone-announcement-090-M2.html</link>
	<description>&lt;p&gt;The second milestone of the upcoming release 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.9.0&quot;&gt;0.9.0&lt;/a&gt; was released today.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_090-M2.html&quot;&gt;0.9.0-M2 release notes&lt;/a&gt; for what changed in detail.&lt;/p&gt;

&lt;p&gt;The main changes and new features since the last milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_090-M1.html&quot;&gt;0.9.0-M1&lt;/a&gt; are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rewrite of Ditto’s “search” service in order to use the same index and have the same query performance for API v1 and v2&lt;/li&gt;
  &lt;li&gt;several contributions in order to operate Eclipse Ditto on Microsoft Azure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Mon, 29 Apr 2019 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation on the move!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/RRGNn66sEKI/eclipse-foundation-move</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/RRGNn66sEKI/eclipse-foundation-move</link>
	<description>After 15 years at 102 Centrepointe Drive in Ottawa, the Eclipse Foundation is on the move!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/RRGNn66sEKI&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 25 Apr 2019 20:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Eclipse Foundation on the move!</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1490</guid>
	<link>https://eclipse-foundation.blog/2019/04/24/eclipse-foundation-on-the-move/</link>
	<description>&lt;p&gt;After 15 years at 102 Centrepointe Drive in Ottawa, the Eclipse Foundation is on the move. We will now be located at 2934 Baseline Road, Suite 202, Ottawa, ON, K2H 1B2.&lt;/p&gt;
&lt;p&gt;Back in 2004, when we took the space current space on Centrepointe, there were only three of us on staff. Fifteen years later we have been joined by over 20 more staff in the Ottawa office, where we now occupy all three floors of our building. With this growth, we have simply outgrown our existing space.&lt;/p&gt;
&lt;p&gt;On May 6th, we move to a new office space nearby that allows us all to be on one floor and doesn’t significantly increase travel time for anyone on our team. The decision to move to one floor was largely based on research that shows that having employees on one floor improves collaboration and offers more opportunities for interactions, thereby building relationships. Our new office also allows room for us to grow as we continue to grow. These fresh new facilities offer several benefits for our company, such as a free gym, lots of green space (think outdoor meetings where creativity can bloom), an on-site cafeteria which provides healthy food options, several in-office meeting rooms and a large boardroom where we can host our larger meetings…and have a few parties for our hard-working staff.&lt;/p&gt;
&lt;p&gt;If  you are in the area, please drop by and say hello. We would certainly welcome the opportunity to show you our amazing new digs!&lt;/p&gt;</description>
	<pubDate>Wed, 24 Apr 2019 19:47:29 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: The “Next” Eclipse CDT</title>
	<guid isPermaLink="false">https://medium.com/p/6d09d0b1ec27</guid>
	<link>https://medium.com/@dougschaefer/the-next-eclipse-cdt-6d09d0b1ec27?source=rss-8f7a70438965------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/700/1*uI7gTFqPmJxQjk6rJWkejQ.jpeg&quot; /&gt;CDT Summit at EclipseCon Europe 2016&lt;/figure&gt;&lt;p&gt;In my last article, &lt;a href=&quot;https://medium.com/@dougschaefer/the-journey-to-a-new-eclipse-cdt-3855ec52334&quot;&gt;I walked through a bit of the history of the Eclipse CDT project&lt;/a&gt;. It’s a great story of the trials and tribulations of community building, working with a group of like minded platform vendors, even competitors, who just wanted a great IDE and who knew the only way to get that was to work together.&lt;/p&gt;&lt;p&gt;What sticks with me most looking back on my ump-teen years on the project is the people. Each of these vendors were led by passionate tools developers who put aside any hint of corporate agenda and just wanted to work with other developers from around the world, to solve hard problems, and build something they would be proud of. Through the semi regular face-to-face CDT Summits and CDT days at EclipseCons past we were able to build relationships and become great friends. Even after some have moved on, I still remain in contact with many of them and we still share a laugh or two, and even the odd beer!&lt;/p&gt;&lt;p&gt;So I offer no apologies if, as participation has dwindled on the project in recent years, I yearn for those days. But my personal enjoyment working in this environment is one thing, &lt;strong&gt;I don’t think the job is done&lt;/strong&gt;. The C++ language continues to evolve and become more usable and powerful than ever before. Even C continues to receive updates. And more importantly, the IDE landscape is changing and we need to keep up to keep our users and customers happy.&lt;/p&gt;&lt;p&gt;Over the years, I have always had to deal with users and even colleagues, who are hard core engineers, who refuse to give up their text editors and custom bash scripts. In the end, it’s been hard to argue with them. For these folk, IDEs don’t work the way they want to work. And, initially at least, it does slow them down as they fight the paradigm and they just end up frustrated and toss it aside losing all those gains we are trying to give them.&lt;/p&gt;&lt;p&gt;But in the end, I guess it was only a matter of time that an IDE platform would come along and offer the best of both worlds. Be a great unopinionated text editor, facilitate hooking up users’s bash scripts, be super extensible to add in little accelerators. It’s been brewing for a while. Sublime was the first such thing I saw developers really enjoy. And now, today, we have Visual Studio Code, which is becoming the dominant editor platform.&lt;/p&gt;&lt;p&gt;And funny enough, an interesting thing happens when you take a bunch of IDE developers and tell them to build a great editor, they end up building an editor so extensible that it slowly becomes an IDE. The VS Code team, many of them former Eclipsers, has managed to create a mechanism to add powerful language services to the editor. And, of all things, add support for debuggers. OK, you add debug support, you’re no longer an editor, you are an IDE. Stop pretending :).&lt;/p&gt;&lt;p&gt;But even greater, the VS Code team has done this by creating standardized APIs and protocols that other IDEs can use. You can build common services and then plug them into your favorite IDE, even Eclipse!&lt;/p&gt;&lt;p&gt;With this new architecture, the path forward for the Eclipse CDT project is clear. We need to take all that C/C++ IDE knowledge we’ve built over the years and use that to build common components that can be used by other IDE platforms. It means growing beyond our Eclipse IDE roots to give users that great experience in the IDE that best works they way they want to work.&lt;/p&gt;&lt;p&gt;We as the CDT community have a lot to offer, and there really isn’t a community like it, that focuses on the needs of the C/C++ developer. The challenge will be to harness that energy again, to work together for the greater good that we can only accomplish together. It really is an exciting time to be an IDE developer and Eclipse is a great home for us to come together.&lt;/p&gt;&lt;p&gt;In my next article I will start getting into the technical meat of what this new vision entails and what fun we can have building it! Time to roll up our sleeves and get to work.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=6d09d0b1ec27&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 23 Apr 2019 17:27:08 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The 2019 IoT Developer Survey Results are Live</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/ueF1Td4fXn8/2019-iot-developer-survey-results-are-live</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/ueF1Td4fXn8/2019-iot-developer-survey-results-are-live</link>
	<description>This year marks the fifth year the Eclipse IoT Working Group has asked the global IoT developer community to share their perceptions, requirements, and priorities.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/ueF1Td4fXn8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 17 Apr 2019 13:40:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Survey of More Than 1,700 IoT Developers Reveals Top Hardware, Software &quot;Stack&quot; Choices</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/rvzoLsL0DKs/New-Survey-of-More-Than-1-700-IoT-Developers-Reveals-Top-Hardware-Software-Stack-Choices.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/rvzoLsL0DKs/New-Survey-of-More-Than-1-700-IoT-Developers-Reveals-Top-Hardware-Software-Stack-Choices.html</link>
	<description>Today, we released the 2019 IoT Developer Survey results that canvassed more than 1,700 developers about their IoT efforts!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/rvzoLsL0DKs&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 17 Apr 2019 13:40:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: The 2019 IoT Developer Survey Results are Live</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1488</guid>
	<link>https://eclipse-foundation.blog/2019/04/17/2019-iot-developer-survey/</link>
	<description>&lt;p&gt;After months of hard work, the 2019 IoT Developer Survey results are live today. This year marks the fifth year the &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse IoT Working Group&lt;/a&gt; has asked the global IoT developer community to share their perceptions, requirements, and priorities. The survey has proven to be an influential assessment of the IoT market as viewed from the development front lines. Access the full findings of the 2019 IoT Developer Survey &lt;a href=&quot;http://bit.ly/2Z6SwiA&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over 1,700 individuals took the survey between February and March 2019. Just like in previous years (see results from 2018, 2017, and earlier &lt;a href=&quot;https://iot.eclipse.org/iot-developer-surveys/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;), Eclipse IoT collaborated with key IoT ecosystem players like Bosch and Red Hat to maximize the reach of the survey.&lt;/p&gt;
&lt;p&gt;The key findings this year include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IoT drives real-world, commercial outcomes today. 65% of respondents are currently working on IoT projects professionally or will be in the next 18 months.&lt;/li&gt;
&lt;li&gt;IoT developers mostly use C, C++, Java, JavaScript, and Python&lt;/li&gt;
&lt;li&gt;AWS, Azure, and GCP are the leading IoT cloud platforms&lt;/li&gt;
&lt;li&gt;Top three industry focus areas remain the same as last year: IoT Platforms, Home Automation, and Industrial Automation / IIoT.&lt;/li&gt;
&lt;li&gt;MQTT remains the dominant IoT communication protocol leveraged by developers&lt;/li&gt;
&lt;li&gt;The Eclipse Desktop IDE is the leading IDE for building IoT applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;IoT gets real(er)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Consistent with our findings last year, two-thirds of the respondents to our survey develop and deploy IoT solutions today or will be doing so within 18 months. This continued focus on building and deploying real world solutions is reflected in the increases in developers’ focus on performance, connectivity, and standards shown in the survey.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;C and Java dominate&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;C won out as the programming language of choice for constrained devices, while Java was most popular for gateways/edge nodes and IoT cloud. Neither of those findings are surprising. C and C++ have long been the languages of choice for small embedded systems where minimizing memory space and power consumption, and maximizing processor utilization are key. Java is the dominant language and platform where the memory and processing resources are larger, and the complexity of the systems are greater. In particular, Java is the language of choice for most cloud infrastructure projects, so seeing it lead in IoT cloud is consistent with that.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;AWS, Azure, and Google hold on to the lead&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;As expected AWS, Azure, and GCP maintain their status as the leading IoT cloud platforms. The list of three and their rankings are entirely consistent with their relative weights in the cloud computing marketplace as a whole, so there is no surprise to see this reflected in our results.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;A continued focus on platforms, home automation, and IIoT&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;IoT Platforms (34%), Home Automation (27%), and Industrial Automation / IIoT (26%) were the respondents’ three most common industry focus areas. These areas are likely to continue to be key targets for IoT developer activity.  The fact that IoT Platforms is consistently year after year the number one focus for IoT developers is interesting. It implies that enterprises and industrials are putting resources into building their own IoT platforms for use by their companies. To me this suggests that industrial IoT is going to be a huge opportunity for hybrid cloud, as companies build and run IoT solutions on-premise based using modern, open technologies.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Security is (still) top of mind &lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Security is still the top concern for IoT developers. Communication Security (38%) Data Encryption (38%), and JSON Web Tokens (JWTs) (26%) were the top three security technologies cited in the survey, with virtualization also starting to play a stronger role in IoT Security.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;MQTT is still the dominant IoT communication protocol&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;HTTP (49%), MQTT (42%), and Websockets (26%) were the top three communications protocols used by IoT developers. The growth in MQTT adoption over the past seven or eight years has been phenomenal, and I like to think that the Eclipse IoT community with its Eclipse Paho and Eclipse Mosquitto projects had a small part to play in that. Having robust open source implementations available has certainly been part of the MQTT’s success. Looking forward that main challenge we see for further MQTT adoption is the lack of interoperability built into the protocol. While MQTT is a great lightweight, low latency protocol it does not provide any guidance on the topic structures and payload definitions used by any device or application. This means that no two teams using MQTT would expect to have their systems be able to reliably exchange data. The Eclipse Tahu project defines the Sparkplug protocol — created by Arlen Nipper one of the co-inventors of MQTT itself. Sparkplug defines the topic structures and payload definitions necessary for out-of-the-box interoperability of SCADA systems. We are hopeful that Sparkplug could spur MQTT to even greater adoption in industrial IoT use cases.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The Eclipse Desktop IDE is the leading IoT IDE&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;45% of respondents use the Eclipse Desktop IDE. It is not at all surprising that the Eclipse IDE has a strong franchise with IoT developers, given the dominance of C and Java. The Eclipse CDT project has long been hugely important in the embedded software space. The past decade CDT has been used by virtually every chip, SOC, and RTOS company as the basis for their toolset. Those developer solutions also typically use additional tools such as the Target Management Framework, and Remote Systems Explorer that were specifically designed with the embedded developer in mind. That, coupled with the Eclipse IDE’s broad use amongst professional Java developers makes its leadership in IoT clear.&lt;/p&gt;
&lt;p&gt;In addition, close to 10% also use Eclipse Che, our community’s next generation cloud-based tooling solution. It really seems part of the future of IoT is in the cloud, one way or another.&lt;/p&gt;
&lt;p&gt;Access the full findings of the 2019 IoT Developer Survey &lt;a href=&quot;http://bit.ly/2Z6SwiA&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to everyone who took the time to fill out this survey, and thanks again our Eclipse IoT members for their help with the promotion.&lt;/p&gt;
&lt;p&gt;We are very interested in hearing your thoughts and feedback about this year’s findings. And, of course, we are always open to suggestions on how to improve the survey in the future!&lt;/p&gt;</description>
	<pubDate>Wed, 17 Apr 2019 11:00:50 +0000</pubDate>
</item>
<item>
	<title>itemis: How to reference UML elements from Xtext DSLs</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/how-to-reference-uml-elements-from-xtext-dsls</guid>
	<link>https://blogs.itemis.com/en/how-to-reference-uml-elements-from-xtext-dsls</link>
	<description>&lt;p&gt;With the &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext framework&lt;/a&gt;, you can build DSL workbenches in just a few steps. However, sometimes you want to reuse model elements already defined in other formats or even in other languages. In this blog post I’m going to demonstrate typical scenarios when you’re reusing model elements belonging to a different language.&lt;/p&gt; 
&lt;p&gt;Firstly, consider having some pre-defined Eclipse UML2 models, and you want to reference classes of these UML models from your Xtext DSL.&lt;/p&gt; 
&lt;p&gt;If you are interested in reusing model elements belonging to the same language but defined in different formats, take a look at my previous blog post “&lt;a href=&quot;https://hosting.itemis.de/en/combining-emf-models-with-xtext-dsls&quot;&gt;Combining EMF models with Xtext DSLs&lt;/a&gt;”.&lt;/p&gt; 
&lt;p&gt;Let's get started with the preparatory steps:&lt;/p&gt; 
&lt;h2&gt;Preparatory steps&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install the latest version of the &lt;em&gt;UML2 Extender SDK&lt;/em&gt; and the &lt;em&gt;Xtext Complete SDK&lt;/em&gt; of the Eclipse release train.&lt;br /&gt;&lt;br /&gt;&lt;img alt=&quot;install-Xtext-Complete-SDK-and-UML2-Extender-SDK&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2019)/Software%20Development/How%20to%20reference%20UML%20elements%20from%20Xtext%20DSLs/install-Xtext-Complete-SDK-and-UML2-Extender-SDK.jpg?width=770&amp;amp;name=install-Xtext-Complete-SDK-and-UML2-Extender-SDK.jpg&quot; style=&quot;width: 770px;&quot; width=&quot;770&quot; /&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt;Create the &lt;em&gt;Domainmodel&lt;/em&gt; project, based on the &lt;a href=&quot;https://www.eclipse.org/Xtext/documentation/102_domainmodelwalkthrough.html&quot;&gt;Xtext 15 Minutes Tutorial&lt;/a&gt;. The meta-model of the &lt;em&gt;Domainmodel&lt;/em&gt; project&lt;br /&gt;&lt;br /&gt;&lt;img alt=&quot;meta-model-of-the-Domainmodel project&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2019)/Software%20Development/How%20to%20reference%20UML%20elements%20from%20Xtext%20DSLs/meta-model-of-the-Domainmodel%20project.jpg?width=750&amp;amp;name=meta-model-of-the-Domainmodel%20project.jpg&quot; style=&quot;width: 750px;&quot; width=&quot;750&quot; /&gt;&lt;br /&gt;&lt;br /&gt;describes that a domain model consist of certain types (data types and entities), an entity contains features and each feature can have a type. To be able to use UML classes in the feature's type definition, the following modifications are necessary:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Modifications&lt;sup&gt;1&lt;/sup&gt; in the &lt;em&gt;org.example.domainmodel&lt;/em&gt; plug-in&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Extend the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/src/org/example/domainmodel/Domainmodel.xtext#L23&quot;&gt;&lt;em&gt;Domainmodel.xtext&lt;/em&gt;&lt;/a&gt; grammar definition:&lt;br /&gt; &lt;pre class=&quot;prettyprint&quot;&gt;grammar org.example.domainmodel.Domainmodel with org.eclipse.xtext.common.Terminals

...

import &quot;http://www.eclipse.org/uml2/5.0.0/UML&quot; as uml

...

Feature:
	(many?='many')? name=ID ':' type=[uml::Class|FQN] | type=[Type];

...&lt;/pre&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt;Extend the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/src/org/example/domainmodel/GenerateDomainmodel.mwe2#L11-L66&quot;&gt;&lt;em&gt;GenerateDomainmodel.mwe2&lt;/em&gt;&lt;/a&gt; workflow:&lt;br /&gt; &lt;pre class=&quot;prettyprint&quot;&gt;module org.example.domainmodel.GenerateDomainmodel

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = &quot;..&quot;

Workflow {

	bean = StandaloneSetup {
		
		scanClassPath = true
		platformUri = rootPath
		
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel&quot;
			to = &quot;platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel&quot;
			to = &quot;platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel&quot;
			to = &quot;platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.uml2.uml/model/UML.genmodel&quot;
			to = &quot;platform:/resource/org.eclipse.uml2.uml/model/UML.genmodel&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore&quot;
			to = &quot;platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.ecore&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore&quot;
			to = &quot;platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore&quot;
			to = &quot;platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore&quot;
			to = &quot;platform:/resource/org.eclipse.uml2.uml/model/UML.ecore&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.uml2.types/model/Types.genmodel&quot;
			to = &quot;platform:/resource/org.eclipse.uml2.types/model/Types.genmodel&quot;
		}
		uriMap = {
			from = &quot;platform:/plugin/org.eclipse.uml2.types/model/Types.ecore&quot;
			to = &quot;platform:/resource/org.eclipse.uml2.types/model/Types.ecore&quot;
		}
		
		registerGeneratedEPackage = &quot;org.eclipse.emf.ecore.EcorePackage&quot;
		registerGeneratedEPackage = &quot;org.eclipse.uml2.uml.UMLPackage&quot;
		registerGeneratedEPackage = &quot;org.eclipse.uml2.types.TypesPackage&quot;
		registerGeneratedEPackage = &quot;org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage&quot;
		registerGeneratedEPackage = &quot;org.eclipse.uml2.codegen.ecore.genmodel.GenModelPackage&quot;
		registerGenModelFile = &quot;platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel&quot;
		registerGenModelFile = &quot;platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel&quot;
		registerGenModelFile = &quot;platform:/resource/org.eclipse.uml2.uml/model/UML.genmodel&quot;
		registerGenModelFile = &quot;platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel&quot;
	}
	
	component = XtextGenerator {
		...
	}
}&lt;/pre&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt;Add the following plugins to the Require-Bundle section in the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/META-INF/MANIFEST.MF#L18-L19&quot;&gt;&lt;em&gt;MANIFEST.MF&lt;/em&gt;&lt;/a&gt; file: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;org.eclipse.uml2.uml&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;org.eclipse.uml2.codegen.ecore&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add the following classes: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/src/org/example/domainmodel/UMLLanguageConstants.xtend&quot;&gt;&lt;em&gt;UMLLanguageConstants.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/src/org/example/domainmodel/UMLQualifiedNameProvider.xtend&quot;&gt;&lt;em&gt;UMLQualifiedNameProvider.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/src/org/example/domainmodel/UMLRuntimeModule.xtend&quot;&gt;&lt;em&gt;UMLRuntimeModule.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel/src/org/example/domainmodel/UMLStandaloneSetup.xtend&quot;&gt;&lt;em&gt;UMLStandaloneSetup.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Modifications&lt;sup&gt;2&lt;/sup&gt; in the &lt;em&gt;org.example.domainmodel.ui&lt;/em&gt; plug-in&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add the following classes: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/src/org/example/domainmodel/ui/UMLExecutableExtensionFactory.xtend&quot;&gt;&lt;em&gt;UMLExecutableExtensionFactory.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/src/org/example/domainmodel/ui/UMLUiModule.xtend&quot;&gt;&lt;em&gt;UMLUiModule.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/src/org/example/domainmodel/ui/editor/ReflectiveTreeEditorOpener.xtend&quot;&gt;&lt;em&gt;ReflectiveTreeEditorOpener.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/src/org/example/domainmodel/ui/internal/DomainmodelActivatorEx.xtend&quot;&gt;&lt;em&gt;DomainmodelActivatorEx.xtend&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Register &lt;em&gt;DomainmodelActivatorEx&lt;/em&gt; as &lt;em&gt;Bundle-Activator&lt;/em&gt; in the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/META-INF/MANIFEST.MF#L27&quot;&gt;&lt;em&gt;MANIFEST.MF&lt;/em&gt;&lt;/a&gt; file.&lt;/li&gt; 
 &lt;li&gt;Add the following plugin to the Require-Bundle section in the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/META-INF/MANIFEST.MF#L21&quot;&gt;&lt;em&gt;MANIFEST.MF&lt;/em&gt;&lt;/a&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;org.eclipse.emf.ecore.editor&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add the following section to the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui/plugin.xml#L435-L442&quot;&gt;&lt;em&gt;plugin.xml&lt;/em&gt;&lt;/a&gt; file:&lt;br /&gt; &lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;!-- register the Xtext UI language services to Xtext's registry --&amp;gt;
&amp;lt;extension
	point=&quot;org.eclipse.xtext.extension_resourceServiceProvider&quot;&amp;gt;
	&amp;lt;resourceServiceProvider
		class=&quot;org.example.domainmodel.ui.UMLExecutableExtensionFactory:org.eclipse.xtext.ui.resource.generic.EmfResourceUIServiceProvider&quot;
		uriExtension=&quot;uml&quot;&amp;gt;
	&amp;lt;/resourceServiceProvider&amp;gt;
&amp;lt;/extension&amp;gt;&lt;/pre&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Manual testing&lt;/h2&gt; 
&lt;p&gt;Start an Eclipse runtime to verify that parsing, linking, content assistant, hovering, hyperlink navigation, quickfixes, etc., are working properly.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Eclipse-manual-testing&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2019)/Software%20Development/How%20to%20reference%20UML%20elements%20from%20Xtext%20DSLs/Eclipse-manual-testing.jpg?width=707&amp;amp;name=Eclipse-manual-testing.jpg&quot; style=&quot;width: 707px;&quot; width=&quot;707&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;Automated testing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Extend the &lt;em&gt;org.example.domainmodel.tests&lt;/em&gt; plug-in by the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.tests/src/org/example/domainmodel/tests/DomainmodelIndexTest.xtend&quot;&gt;&lt;em&gt;Indexing&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.tests/src/org/example/domainmodel/tests/DomainmodelLinkingTest.xtend&quot;&gt;&lt;em&gt;Linking&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.tests/src/org/example/domainmodel/tests/DomainmodelParsingTest.xtend&quot;&gt;&lt;em&gt;Parsing&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.tests/src/org/example/domainmodel/tests/DomainmodelScopingTest.xtend&quot;&gt;&lt;em&gt;Scoping&lt;/em&gt;&lt;/a&gt;, etc. JUnit test cases.&lt;/li&gt; 
 &lt;li&gt;Extend the &lt;em&gt;org.example.domainmodel.ui.tests&lt;/em&gt; plug-in by the &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui.tests/src/org/example/domainmodel/ui/tests/DomainmodelContentAssist2Test.xtend&quot;&gt;&lt;em&gt;ContentAssistant&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui.tests/src/org/example/domainmodel/ui/tests/DomainmodelHover2Test.xtend&quot;&gt;&lt;em&gt;Hovering&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui.tests/src/org/example/domainmodel/ui/tests/DomainmodelHyperlinking2Test.xtend&quot;&gt;&lt;em&gt;Hyperlinking&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/itemis/itemis-blog/blob/referencing-uml-elements-from-xtext-dsls/org.example.domainmodel.ui.tests/src/org/example/domainmodel/ui/tests/DomainmodelQuickfix2Test.xtend&quot;&gt;&lt;em&gt;Quickfixes&lt;/em&gt;&lt;/a&gt;, etc. JUnit Plug-in test cases.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;We have done the preparatory steps, modifications and testing necessary to reuse model elements belonging to a different language. This example has been kept simple on purpose.&lt;/p&gt; 
&lt;p&gt;If you are interested in more advanced use-cases on the Xtext/UML integration, I recommend &lt;a href=&quot;https://hosting.itemis.de/author/karsten-thoms&quot;&gt;Karsten&lt;/a&gt;‘s and &lt;a href=&quot;https://hosting.itemis.de/author/holger-schill&quot;&gt;Holger&lt;/a&gt;‘s presentation on “&lt;a href=&quot;https://www.youtube.com/watch?v=teOULtQ81-U&quot;&gt;How to build Code Generators for Non-Xtext Models with Xtend&lt;/a&gt;”.&lt;/p&gt; 
&lt;p&gt;Do you have questions or feedback? Feel free to leave me a comment below.&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt;  
&lt;p&gt;&lt;sup&gt;1,2&lt;/sup&gt; Please note that the blog post “&lt;a href=&quot;https://hosting.itemis.de/en/combining-emf-models-with-xtext-dsls&quot;&gt;Combining EMF Models with Xtext DSLs&lt;/a&gt;” explains the necessary modifications in detail.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fhow-to-reference-uml-elements-from-xtext-dsls&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 16 Apr 2019 14:00:00 +0000</pubDate>
	<author>miklossy@itemis.de (Tamas Miklossy)</author>
</item>
<item>
	<title>Doug Schaefer: The Journey to a “New Eclipse CDT”</title>
	<guid isPermaLink="false">https://medium.com/p/3855ec52334</guid>
	<link>https://medium.com/@dougschaefer/the-journey-to-a-new-eclipse-cdt-3855ec52334?source=rss-8f7a70438965------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/756/1*mwdMRl-nYsZ3eQ_NRvfDRw.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The Eclipse CDT project has been around for a long time. The first code commits were in June 2002 when QNX contributed the core C/C++ tooling components of it’s fresh new Momentics IDE. For the time it was quite visionary. Platform vendors are more often focused on their platforms and provide tools as an enabler for developers to leverage the power of those platforms. Having every company replicate that effort only leads to poor tools and unhappy developers. It doesn’t scale. Why not join together with like-minded vendors and build something we can all benefit from?&lt;/p&gt;&lt;p&gt;As an added bonus, we end up with a standard platform that allows developers to work with multiple environments on the same platform leading to some interesting partnership opportunities. At the very least developers acquire skills working with that IDE they can take to other jobs or even other projects in the same company. It truly is a win/win for everyone and makes for a very rich ecosystem.&lt;/p&gt;&lt;p&gt;But as with all long lasting projects, it has had it’s ebbs and flows. As we started, QNX and my team at Rational Software (later part of IBM) were the main contributors. There were a few others lurking around with a few contributions. The first few monthly CDT conference calls were cool as new voices appeared from around the world. It was a great start that led to the first EclipseCon where we had people standing in the hall trying to listen into our overflow birds of a feather session. We were overwhelmed by the interest.&lt;/p&gt;&lt;p&gt;But it didn’t last forever and the powers that be decided my team at IBM was needed elsewhere in the company. Obviously I wasn’t pleased and certainly wasn’t ready to leave the community. So when Sebastien Marineau, the CDT project lead at the time suggested I come work for him at QNX, I jumped at the chance. It wasn’t the easiest of moves but it was my chance to do what I could to help keep the CDT machine rolling and ended up getting a good start on my pride and joy, CDT’s super-fast indexer.&lt;/p&gt;&lt;p&gt;At the first CDT summit held in the fall of 2005 shortly after I had joined QNX, we had a lot of interest and it was well attended with over a dozen vendors present. We had some good presentations on what we were working on and some interesting presentations from other vendors on what they’d like to see in the project. Well someone said the wrong thing and I had to stop the proceedings. Of the 20 or so people in the room I asked the active contributors to stand up. There were four of us. How are they expecting this little team to do their bidding when the whole idea was to share in the effort and do something great together.&lt;/p&gt;&lt;p&gt;That’s probably the proudest and hardest moment of my time on the CDT. It worked. And from the chart above you can see we had healthy growth and lots of vendors coming to help after that. Those were the best years for the project. Though for me personally, I never really did recover from my lost team at Rational/IBM and ended up moving around a bit, never leaving the CDT project but not really giving it my all.&lt;/p&gt;&lt;p&gt;Luckily and happily, for the last four years, I’ve been back at QNX working on that original Momentics IDE and contributing to Eclipse trying to make it easier to use for C/C++ developers including my favorite add, the Launch Bar. Our customers are happy, the community seems happy, and there are more and more vendors delivering product based on our work in open source.&lt;/p&gt;&lt;p&gt;But also from the chart you can see participation in the CDT has been on a worrying trajectory to a point where we once again have about 4 people actively working on it. Despite being as popular as ever, only a small percentage of people and companies out there are helping with the common cause. It’s made me sad, and frankly angry. And I must apologize to my friends at last year’s EclipseCon for losing control of that a bit, but when you have so many companies leveraging something you are passionately doing for free for them, thanks to my sympathetic employer, you feel taken advantage of.&lt;/p&gt;&lt;p&gt;But as the leader of the project, it’s up to me with the help of my open source colleagues to find a way to turn that around. And we have some ideas that I’m very excited about. My next few posts will talk about that and go into details of some very cool new efforts underway in the CDT project. The IDE world has changed but it’s needed more than ever and we are ready to adapt. We really hope you can join us and make it great, again…&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=3855ec52334&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 11 Apr 2019 18:08:25 +0000</pubDate>
</item>
<item>
	<title>N4JS: Automated rename refactoring in N4JS IDE</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-2530662466762609742</guid>
	<link>https://n4js.blogspot.com/2019/03/automated-rename-refactoring-in-n4js.html</link>
	<description>Refactoring is probably one of the most important tools for us, software developers since we constantly need to change the structure of the code to improve the code quality or to prepare the code for new features etc. The most used refactoring operation is arguably &lt;b&gt;&lt;i&gt;rename refactoring&lt;/i&gt;&lt;/b&gt;. Find and replace could be used for renaming but the risk of renaming unrelated names is pretty high.&lt;br /&gt;&lt;br /&gt;N4JS IDE provides a powerful way of automatically renaming a definition and all its references with a comparable user experience as rename refactoring of Eclipse Java Development Tool (JDT).  The slogan is: &lt;i&gt;I want to rename this thing, do it for me however you like but please in a safe manner so that I can move on! &lt;/i&gt;This will exactly be your experience with rename refactoring in N4JS IDE.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;b&gt;Simple rename example&lt;/b&gt;&lt;/h3&gt;Let's have look at a simple example to see how rename refactoring works in N4JS IDE in action. Assume that we have an N4JS file with the following content.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-PzJHzyKNMWo/XJTEE071AaI/AAAAAAAAAGY/Qk9KvQbtCbksypaUt-GtCB4K7HJmKR0LwCLcBGAs/s1600/rename_refactoring_simple_example.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-PzJHzyKNMWo/XJTEE071AaI/AAAAAAAAAGY/Qk9KvQbtCbksypaUt-GtCB4K7HJmKR0LwCLcBGAs/s1600/rename_refactoring_simple_example.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;When the cursor is at &lt;span&gt;A&lt;/span&gt; of the constructor &lt;span&gt;new A()&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;and we press Cmd + Shift + R to rename A to B, the rename refactoring suggests that it would rename A to B at 3 different locations. After entering the new name B and pressing enter, the class A and all its usages are renamed to B, fully automatically :-)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Name conflicts detection &lt;/h3&gt;Renaming an element may cause name conflicts. The rename refactoring in N4JS IDE provides comprehensive checks for detecting name conflicts. If the new name would cause name conflicts, the rename refactoring is disallowed.&lt;br /&gt;&lt;br /&gt;In the example above,  renaming class A to class C would cause a name conflict because in the script scope the name C already exists. The rename refactoring provided by N4JS IDE can recognize this conflict and shows an error message.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-9Um8f1tJZjo/XJS9OAQQx9I/AAAAAAAAAF4/GDRqLJkdf68TvRXI1Uh8SnxJVRSiXe_WACLcBGAs/s1600/rename_refactoring_name_conflict.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-9Um8f1tJZjo/XJS9OAQQx9I/AAAAAAAAAF4/GDRqLJkdf68TvRXI1Uh8SnxJVRSiXe_WACLcBGAs/s1600/rename_refactoring_name_conflict.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In a large code base, these checks are a true life saver. Imagine having to manually verify these kinds of name conflicts across hundred of files.&lt;br /&gt;&lt;br /&gt;Additionally, N4JS IDE's rename refactoring is capable of recognizing name conflicts when renaming&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;members of classifier&lt;/li&gt;&lt;li&gt;formal parameters of a function or method&lt;/li&gt;&lt;li&gt;field of a structural type&lt;/li&gt;&lt;li&gt;enum literal&lt;/li&gt;&lt;li&gt;local variable, constant&lt;/li&gt;&lt;li&gt;global variable, constant&lt;/li&gt;&lt;li&gt;etc.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;Rename composed members&lt;/h3&gt;&lt;div&gt;N4JS language supports composed elements. Renaming a composed element is somewhat special.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-OdzTax12UZY/XKyF2jEua7I/AAAAAAAAAHs/tewAn07C-4QeuEnhUbWIcs1QTCpdmz6xACLcBGAs/s1600/rename_refactoring_composed_member.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-OdzTax12UZY/XKyF2jEua7I/AAAAAAAAAHs/tewAn07C-4QeuEnhUbWIcs1QTCpdmz6xACLcBGAs/s1600/rename_refactoring_composed_member.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;In this example, &lt;span&gt;ab.foo&lt;/span&gt; is a composed member because &lt;span&gt;ab&lt;/span&gt; is of the intersection type &lt;span&gt;A &amp;amp; B&lt;/span&gt; which is composed of both &lt;span&gt;A&lt;/span&gt; and &lt;span&gt;B&lt;/span&gt;. Renaming &lt;span&gt;ab.foo&lt;/span&gt; would rename all the definitions that contribute to the creation of &lt;span&gt;ab.foo&lt;/span&gt; as well as all references of these definitions.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Preview of changes&lt;/h3&gt;&lt;div&gt;When you start rename refactoring operation, you have the possibility to see the preview of changes before actually executing the operation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-OPewaTL2sJA/XKyGV4ooRpI/AAAAAAAAAH0/N9ruEVuNOEMNAESq45rOUFzkAJOS8naxwCLcBGAs/s1600/rename-refactoring-preview.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-OPewaTL2sJA/XKyGV4ooRpI/AAAAAAAAAH0/N9ruEVuNOEMNAESq45rOUFzkAJOS8naxwCLcBGAs/s1600/rename-refactoring-preview.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Note that the preview shows the changes in each file in a very recognizable manner.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Undo changes&lt;/h3&gt;&lt;div&gt;After the rename refactoring, if you feel regret and would like to undo the operation, simply press Cmd + Z. The undo will undo all the changes in affected files previously done by the rename refactoring.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Current limitations&lt;/h3&gt;&lt;div&gt;As the time of this writing, the rename refactoring in N4JS IDE still has several limitations:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Renaming alias is not supported&lt;/li&gt;&lt;li&gt;Checking name conflicts do not take into account shadowing&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;By Minh Quang Tran&lt;/div&gt;</description>
	<pubDate>Tue, 09 Apr 2019 11:48:48 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>Wayne Beaton: Specification Scope in Jakarta EE</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5558</guid>
	<link>https://waynebeaton.wordpress.com/2019/04/08/specification-scope-in-jakarta-ee/</link>
	<description>&lt;p&gt;With the &lt;a href=&quot;https://www.eclipse.org/projects/efsp&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) a single open source specification project has a dedicated project team of committers to create and maintain one or more specifications. The cycle of creation and maintenance extends across multiple versions of the specification, and so while individual members may come and go, the team remains and it is that team that is responsible for the every version of that specification that is created.&lt;/p&gt;
&lt;p&gt;The first step in managing how intellectual property rights flow through a specification is to define the range of the work encompassed by the specification. Per the Eclipse &lt;a href=&quot;https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Intellectual Property Policy&lt;/a&gt;, this range of work (referred to as the &lt;em&gt;scope&lt;/em&gt;) needs to be well-defined and captured. Once defined, the scope is effectively locked down (changes to the scope are possible but rare, and must be carefully managed; the scope of a specification can be tweaked and changed, but doing so requires approval from the &lt;a href=&quot;https://jakarta.ee/&quot;&gt;Jakarta EE Working Group’s&lt;/a&gt; &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-committee&quot;&gt;Specification Committee&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Regarding scope, the EFSP states:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Among other things, the Scope of a Specification Project is intended to inform companies and individuals so they can determine whether or not to contribute to the Specification. Since a change in Scope may change the nature of the contribution to the project, a change to a Specification Project’s Scope must be approved by a Super-majority of the Specification Committee.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As a general rule, a scope statement should not be too precise. Rather, it should describe the intention of the specification in broad terms. Think of the scope statement as an executive summary or “elevator pitch”.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Elevator pitch: You have fifteen seconds before the elevator doors open on your floor; tell me about the problem your specification addresses.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;The scope statement must answer the question: what does an implementation of this specification do? &lt;/span&gt;The scope statement must be aspirational rather than attempt to capture any particular state at any particular point-in-time. A scope statement must not focus on the work planned for any particular version of the specification, but rather, define the problem space that the specification is intended to address.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Jakarta Batch provides describes a means for executing and managing batch processes in Jakarta EE applications.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Jakarta Message Service describes a means for Jakarta EE applications to create, send, and receive messages via loosely coupled, reliable asynchronous communication services.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For the scope statement, you can assume that the reader has a rudimentary understanding of the field. It’s reasonable, for example, to expect the reader to understand what “batch processing” means.&lt;/p&gt;
&lt;p&gt;I should note that the two examples presented above are just examples of form. I’m pretty sure that they make sense, but defer to the project teams to work with their communities to sort out the final form.&lt;/p&gt;
&lt;p&gt;The scope is “sticky” for the entire lifetime of the specification: it spans versions. The &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-plans&quot;&gt;plan&lt;/a&gt; for any particular &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-version-lifecycle&quot;&gt;development cycle&lt;/a&gt; must describe work that is &lt;em&gt;in scope&lt;/em&gt;; and at the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews&quot;&gt;checkpoint (progress and release) reviews&lt;/a&gt;, the project team must be prepared to demonstrate that the behavior described by the specifications (and tested by the corresponding TCK) cleanly &lt;em&gt;falls within&lt;/em&gt; the scope (note that the development life cycle of specification project is described in &lt;a href=&quot;https://waynebeaton.wordpress.com/2019/03/08/eclipse-foundation-specification-process-step-by-step/&quot;&gt;Eclipse Foundation Specification Process Step-by-Step&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In addition the &lt;em&gt;specification&lt;/em&gt; scope which is required by the Eclipse Intellectual Property Policy and EFSP, the &lt;em&gt;specification project&lt;/em&gt; that owns and maintains the specification needs a &lt;em&gt;project scope&lt;/em&gt;. The project scope is, I think, pretty straightforward: a particular specification project defines and maintains a specification.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The Jakarta Batch project defines and maintains the Jakarta Batch specification and related artifacts.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Like the specification scope, the project scope should be aspirational. In this regard, the specification project is responsible for the particular specification in perpetuity. Further the related artifacts, like APIs and TCKs can be &lt;em&gt;in scope&lt;/em&gt; without actually being managed by the project &lt;em&gt;right now&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Today, for example, most of the TCKs for the Jakarta EE specifications are rolled into the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.jakartaee-tck&quot;&gt;Jakarta EE TCK&lt;/a&gt; project. But, over time, this single monster TCK may be broken up and individual TCKs moved to corresponding specification projects. Or not. The point is that regardless of where the technical artifacts are currently maintained, they may one day be part of the specification project, so they are &lt;em&gt;in scope&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I should back up a bit and say that our intention right now is to turn the “Eclipse Project for …” projects that we have managing artifacts related to various specifications into actual specification projects. As part of this effort, we’ll add Git repositories to these projects to provide a home for the specification documents (more on this later). A handful of these proto-specification projects currently include artifacts related to multiple specifications, so we’ll have to sort out what we’re going to do about those project scope statements.&lt;/p&gt;
&lt;p&gt;We might consider, for example, changing the project scope of the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.jakartaee-stable&quot;&gt;Jakarta EE Stable APIs&lt;/a&gt; (note that I’m guessing a future new project name) to something simple like:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Jakarta EE Stable APIs provides a home for stable (legacy) Jakarta EE specifications and related artifacts which are no longer actively developed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But, all that talk about specification projects aside, our initial focus needs to be on describing the scope of the specifications themselves. With that in mind, the EE4J PMC has created a &lt;a href=&quot;https://github.com/orgs/eclipse-ee4j/projects/10&quot;&gt;project board&lt;/a&gt; with issues to track this work and we’re going to ask the project teams to start working with their communities to put these scope statements together. If you have thoughts regarding the scope statements for a particular specification, please weigh in.&lt;/p&gt;
&lt;p&gt;Note that we’re in a bit of a weird state right now. As we engage in a parallel effort to rename the specifications (and corresponding specification projects), it’s not entirely clear what we should call things. You’ll notice that the issues that have been created all use the names that we guess we’re going to end up using (there’s more more information about that in &lt;a href=&quot;https://waynebeaton.wordpress.com/2019/04/04/renaming-java-ee-specifications-for-jakarta-ee/&quot;&gt;Renaming Java EE Specifications for Jakarta EE&lt;/a&gt;).&lt;/p&gt;</description>
	<pubDate>Mon, 08 Apr 2019 14:56:30 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: How to participate in advancing Jakarta EE Specification: Technical and Collateral material related work</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/kj_9CIf7Pqg/how-participate-advancing-jakarta-ee-specification-technical-and-collateral</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/kj_9CIf7Pqg/how-participate-advancing-jakarta-ee-specification-technical-and-collateral</link>
	<description>We have heard from members of the community some suggestions on what they need from the specification, but we can always use more!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/kj_9CIf7Pqg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Apr 2019 12:40:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Renaming Java EE Specifications for Jakarta EE</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/bFDGTTrgvmk/renaming-java-ee-specifications-jakarta-ee</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/bFDGTTrgvmk/renaming-java-ee-specifications-jakarta-ee</link>
	<description>As we prepare to engage in actual specification work, it's time to start thinking about changing the names of the specifications and the projects that contain their artifacts.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/bFDGTTrgvmk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Apr 2019 12:40:00 +0000</pubDate>
</item>
<item>
	<title>N4JS: Develop a React app in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-2700396086206641147</guid>
	<link>https://n4js.blogspot.com/2019/04/develop-react-app-in-n4js.html</link>
	<description>&lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt; is a popular JavaScript library created by Facebook widely used for developing web user interface. N4JS provides full support for React as well as the JavaScript extension &lt;a href=&quot;https://facebook.github.io/jsx/&quot; target=&quot;_blank&quot;&gt;JSX&lt;/a&gt; for describing UI elements. Internally, we have been using N4JS in combination with React and JSX for years to develop very large e-commerce web applications.&lt;br /&gt;&lt;br /&gt;In this blog post, we would like to show you the support of React and JSX in N4JS. In particular, we will implement the game Tic-tac-toe in N4JS. The implementation is heavily based on the pure JavaScript version in the tutorial &lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot; target=&quot;_blank&quot;&gt;Tictactoe in React&lt;/a&gt;. In this post, we will focus on N4JS specifics as well as on the advantages of using N4JS over pure JavaScript.&lt;br /&gt;&lt;br /&gt;As typical with Rect applications, the first step is to design a tree of React components to represent the application.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-XiSxGN0f70A/XKYoXaGEjAI/AAAAAAAAAGw/0dz5lD3jDqwGKFD1ZNudKOMCbp9PhZJ5wCLcBGAs/s1600/tictactoe-react-components.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;276&quot; src=&quot;https://4.bp.blogspot.com/-XiSxGN0f70A/XKYoXaGEjAI/AAAAAAAAAGw/0dz5lD3jDqwGKFD1ZNudKOMCbp9PhZJ5wCLcBGAs/s400/tictactoe-react-components.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The root React component is Game that consists of two areas. The left area is the React component Board showing the Tic-tac-toe board while the right area shows the game information.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;N4JS type definitions of React&lt;/h3&gt;In order to make use of N4JS's type checking for React, we need to declare &lt;span&gt;@n4jsd/react&lt;/span&gt; as dev dependency in &lt;span&gt;package.json&lt;/span&gt;. &lt;span&gt;@n4jsd/react,&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt; provided by us as a public npm,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;consists of &lt;/span&gt;&lt;span&gt;n4jsd&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt; files that contain file definitions for React.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;{&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: &lt;/span&gt;&quot;tictactoe&quot;&lt;span class=&quot;s1&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #931a68;&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&quot;@n4jsd/react&quot;&lt;span class=&quot;s1&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;s3&quot;&gt;&quot;&amp;lt;=16.6.*&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot; style=&quot;color: #6c9fe9;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6c9fe9;&quot;&gt;},&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&quot;dependencies&quot;&lt;span class=&quot;s1&quot;&gt;: {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot; style=&quot;color: #6c9fe9;&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span style=&quot;color: #6c9fe9;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;s3&quot;&gt;&quot;^16.6.0&quot;&lt;/span&gt;&lt;span style=&quot;color: #6c9fe9;&quot;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;}&lt;/div&gt;                                        &lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;}&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;File extension n4jsx&lt;/h3&gt;&lt;br /&gt;The standard file extension of N4JS is .n4js. N4JS files containing React and JSX must have the extension .n4jsx&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Square React component&lt;/h3&gt;The Square React component defines a single square of the Tic-tac-toe board that can be clicked by the current user. Its value is either &lt;b&gt;X&lt;/b&gt; or &lt;b&gt;O or null &lt;/b&gt;depending on which user is in turn or if the square is empty. In this example, we define Square as a lightweight functional component since it does not have any state.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;* Square props&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;*/&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;interface&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ~SquareProps &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;extends&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;React.ComponentProps&lt;span class=&quot;s2&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; value: &lt;span class=&quot;s3&quot;&gt;string&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; onClick: &lt;/span&gt;{function():&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;void}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;}&lt;/div&gt;&lt;div class=&quot;p4&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;* Square React component&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;*/&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;function&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Square(props: &lt;/span&gt;SquareProps&lt;span class=&quot;s2&quot;&gt;): &lt;/span&gt;React.Element&amp;lt;?&amp;gt;&lt;span class=&quot;s2&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;b&gt;return&lt;/b&gt;&lt;span class=&quot;s2&quot;&gt; (&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;button className=&lt;span class=&quot;s4&quot;&gt;&quot;square&quot;&lt;/span&gt; onClick={props.onClick}&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;{props.value}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&amp;lt;/button&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;);&lt;/div&gt;                   &lt;br /&gt;&lt;div class=&quot;p3&quot;&gt;}&lt;/div&gt;&lt;br /&gt;The functional definition of Square must have a single &lt;span&gt;props&lt;/span&gt; parameter and return an instance of type &lt;span&gt;React.Element&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;When a &lt;span&gt;Square&lt;/span&gt; is instantiated, it expects two mandatory props described by &lt;span&gt;SquareProps&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;value&lt;/span&gt;: the value of the square, either &lt;span&gt;X&lt;/span&gt;, &lt;span&gt;O&lt;/span&gt; or &lt;span&gt;null&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;onClick&lt;/span&gt;: the event handler to be called when the square is clicked&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;SquareProps&lt;/span&gt;, as any data structure describing props of a React component, must extend &lt;span&gt;React.ComponentProps&lt;/span&gt;. In addition to having explicit types, the props can be declared as mandatory (as in this example) or optional with the help of the question mark. For instance,  if you declared&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; value?: &lt;span class=&quot;s3&quot;&gt;string&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;value&lt;/span&gt; would be an optional prop.&lt;br /&gt;&lt;br /&gt;Here we start to see the advantages of N4JS over the pure non-type JavaScript implementation. When a Square component is created, the compiler will enforce the type of the props. Moreover, it will complain if a mandatory prop is missing. And all these checks happen &lt;i&gt;&lt;b&gt;at compile time&lt;/b&gt;&lt;/i&gt;. In pure JavaScript, we will recognize those mistakes only at runtime.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Board component&lt;/h3&gt;The Board React component represents the Tic-tac-toe board. Even though it does not have state, we define it as a class because it contains a helper method.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;* Board props&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;*/&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;interface&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ~BoardProps &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;extends&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;React.ComponentProps&lt;span class=&quot;s2&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; squares: &lt;span class=&quot;s3&quot;&gt;[string]&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; onClick: &lt;/span&gt;{function(int):&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;void}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;}&lt;/div&gt;&lt;div class=&quot;p4&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;* Board React component&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;*/&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;class&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Board &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;extends&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;React.Component&amp;lt;BoardProps,&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Object&amp;gt;&lt;span class=&quot;s2&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;* Render the i-th square on the board&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;   &lt;/span&gt;*/&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;renderSquare(i: &lt;span class=&quot;s3&quot;&gt;int&lt;/span&gt;) {&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;return&lt;/b&gt;&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;Square&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;value={&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.props.squares[i]}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;onClick={() =&amp;gt; &lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.props.onClick(i)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/div&gt;&lt;div class=&quot;p4&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;p5&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;@Override&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; render(): &lt;/span&gt;React.Element&amp;lt;?&amp;gt;&lt;span class=&quot;s2&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;return&lt;/b&gt;&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;div&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&amp;lt;div className=&lt;span class=&quot;s4&quot;&gt;&quot;board-row&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;0&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;1&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;2&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&amp;lt;div className=&lt;span class=&quot;s4&quot;&gt;&quot;board-row&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;3&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;4&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;5&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&amp;lt;div className=&lt;span class=&quot;s4&quot;&gt;&quot;board-row&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;6&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;7&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;{&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.renderSquare(&lt;span class=&quot;s5&quot;&gt;8&lt;/span&gt;)}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/div&gt;                                                &lt;br /&gt;&lt;div class=&quot;p3&quot;&gt;}&lt;/div&gt;&lt;br /&gt;The Board class, as any class representing a React component, must extend &lt;span&gt;React.Component&lt;/span&gt;. Note that &lt;span&gt;React.Component&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt; expects two type arguments: the first type argument is the type of props and the second type argument is the type of state.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Here, in the &lt;span&gt;render&lt;/span&gt; method we simply create 9 Squares that make up the board.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Game React component&lt;/h3&gt;This is the root React component of this application and hence does not have any props. Instead, it has state represented by &lt;span&gt;GameState&lt;/span&gt; which stores the history of the board, the step number and whether the next player is &lt;span&gt;X&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;* Game state&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;*/&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;interface&lt;/b&gt;&lt;/span&gt; ~GameState {&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; history: &lt;/span&gt;Array&amp;lt;~Object&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;with&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;{&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;squares:&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;Array&amp;lt;string&amp;gt;}&amp;gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; stepNumber: &lt;span class=&quot;s3&quot;&gt;int&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; xIsNext: &lt;span class=&quot;s3&quot;&gt;boolean&lt;/span&gt;;&lt;/div&gt;         &lt;br /&gt;&lt;div class=&quot;p2&quot;&gt;}&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;* Game React component (root)&lt;/div&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;*/&lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;export&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;default&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;class&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Game &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;extends&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;React.Component&amp;lt;React.ComponentProps,&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;GameState&amp;gt;&lt;span class=&quot;s2&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; constructor(props: &lt;span class=&quot;s3&quot;&gt;React.ComponentProps&lt;/span&gt;) {&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;super&lt;/b&gt;&lt;/span&gt;(props);&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;.state = {&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;history: [&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;{&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;          &lt;/span&gt;squares: &lt;span class=&quot;s1&quot;&gt;&lt;b&gt;new&lt;/b&gt;&lt;/span&gt; Array&amp;lt;&lt;span class=&quot;s3&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;s4&quot;&gt;9&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;        &lt;/span&gt;}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;stepNumber: &lt;span class=&quot;s4&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;      &lt;/span&gt;xIsNext: &lt;span class=&quot;s1&quot;&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;/span&gt;};&lt;/div&gt;                 &lt;br /&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;}&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;&lt;span style=&quot;color: #ff40ff;&quot;&gt;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;  &lt;span style=&quot;color: #ff40ff;&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;p3&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;p2&quot;&gt;&lt;span class=&quot;s1&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; render(): &lt;/span&gt;React.Element&amp;lt;?&amp;gt;&lt;span class=&quot;s1&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;span&gt;  ...&lt;/span&gt;&lt;br /&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br /&gt;&lt;span&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;Here, again thanks to type checking, the N4JS compiler will complain if we access a non-existing field of the state or use the wrong type of a certain field &lt;b&gt;&lt;i&gt;at compile time&lt;/i&gt;&lt;/b&gt;. In pure JavaScript, we will recognize those mistakes only at runtime.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Source code&lt;/h3&gt;You can find the source code &lt;a href=&quot;https://github.com/qtran-n4/tictactoe&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;text-align: right;&quot;&gt;                                                                                                                      By Minh Quang Tran&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 05 Apr 2019 10:07:56 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>Wayne Beaton: Renaming Java EE Specifications for Jakarta EE</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5559</guid>
	<link>https://waynebeaton.wordpress.com/2019/04/04/renaming-java-ee-specifications-for-jakarta-ee/</link>
	<description>&lt;p&gt;It’s time to change the specification names…&lt;/p&gt;
&lt;p&gt;When we first moved the APIs and TCKs for the Java EE specifications over to the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j&quot;&gt;Eclipse Foundation&lt;/a&gt; under the &lt;a href=&quot;https://jakarta.ee/&quot;&gt;Jakarta EE&lt;/a&gt; banner, we kept the existing names for the specifications in place, and adopted placeholder names for the open source projects that hold their artifacts. As we prepare to engage in actual specification work (involving an actual specification document), it’s time to start thinking about changing the names of the specifications and the projects that contain their artifacts.&lt;/p&gt;
&lt;p&gt;Why change? For starters&lt;span&gt;, it’s just good form to leverage the Jakarta brand. But, more critically, m&lt;/span&gt;&lt;span&gt;any of the existing specification names use trademarked terms that make it either very challenging or impossible to use those names without violating trademark rules.&lt;/span&gt;&lt;span&gt; Motivation for changing the names of the existing open source projects that we’ll turn into specification projects is, I think, a little easier: &lt;/span&gt;&lt;span&gt;“Eclipse Project for …” is a terrible name. So, while the current names for our proto-specification projects have served us well to-date, it’s time to change them. &lt;/span&gt;&lt;span&gt;To keep things simple, we recommend that we just use the name of the specification as the project name. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;With this in mind, we’ve come up with a naming pattern that we believe can serve as a good starting point for discussion. To start with, in order to keep things as simple as possible, we’ll have the project use the same name as the specification (unless there is a compelling reason to do otherwise).&lt;/p&gt;
&lt;p&gt;The naming rules are relatively simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace “Java” with “Jakarta” (e.g. “Java Message Service”&lt;span&gt; becomes “Jakarta Message Service”);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Add a space in cases where names are mashed together (e.g. “JavaMail” becomes “Jakarta Mail”);&lt;/li&gt;
&lt;li&gt;Add “Jakarta” when it is missing (e.g. “Expression Language” becomes “Jakarta Expression Language”); and&lt;/li&gt;
&lt;li&gt;Rework names to consistently start with “Jakarta” (“Enterprise JavaBeans” becomes “Jakarta Enterprise Beans”).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This presents us with an opportunity to add even more consistency to the various specification names. Some, for example, are more wordy or descriptive than others; some include the term “API” in the name, and others don’t; etc.&lt;/p&gt;
&lt;p&gt;We’ll have to sort out what we’re going to do with the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.jakartaee-stable&quot;&gt;Eclipse Project for Stable Jakarta EE Specifications&lt;/a&gt;, which provides a home for a small handful of specifications which are not expected to change. I’ll personally be happy if we can at least drop the “Eclipse Project for” from the name&lt;span&gt; (“Jakarta EE Stable”?)&lt;/span&gt;&lt;span&gt;. We’ll also have to sort out what we’re going to do about the &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.mojarra&quot;&gt;Eclipse Mojarra&lt;/a&gt; and &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.metro&quot;&gt;Eclipse Metro&lt;/a&gt; projects which hold the APIs for some specifications; we may end up having to create new specification projects as homes for development of the corresponding specification documents (regardless of how this ends up manifesting as a specification project, we’re still going to need specification names).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Based on all of the above, here is my suggested &lt;em&gt;starting point&lt;/em&gt; for specification (and most project) names (I’ve applied the rules described above; and have suggested tweaks for consistency by &lt;del&gt;strike out&lt;/del&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jakarta &lt;del&gt;APIs&lt;/del&gt; for XML Messaging&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;Architecture for&lt;/del&gt; XML Binding&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; XML&lt;del&gt;-based&lt;/del&gt; Web Services&lt;/li&gt;
&lt;li&gt;Jakarta Common Annotations&lt;/li&gt;
&lt;li&gt;Jakarta Enterprise Beans&lt;/li&gt;
&lt;li&gt;Jakarta Persistence &lt;del&gt;API&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Jakarta Contexts and Dependency Injection&lt;/li&gt;
&lt;li&gt;Jakarta EE Platform&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; JSON Binding&lt;/li&gt;
&lt;li&gt;Jakarta Servlet&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; RESTful Web Services&lt;/li&gt;
&lt;li&gt;Jakarta Server Faces&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; JSON Processing&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;EE&lt;/del&gt; Security &lt;del&gt;API&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Jakarta Bean Validation&lt;/li&gt;
&lt;li&gt;Jakarta Mail&lt;/li&gt;
&lt;li&gt;Jakarta Beans Activation &lt;del&gt;Framework&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Jakarta Debugging Support for Other Languages&lt;/li&gt;
&lt;li&gt;Jakarta Server Pages Standard Tag Library&lt;/li&gt;
&lt;li&gt;Jakarta EE Platform Management&lt;/li&gt;
&lt;li&gt;Jakarta EE Platform Application Deployment&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; XML Registries&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; XML-based RPC&lt;/li&gt;
&lt;li&gt;Jakarta Enterprise Web Services&lt;/li&gt;
&lt;li&gt;Jakarta Authorization &lt;del&gt;Contract for Containers&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Jakarta Web Services Metadata&lt;/li&gt;
&lt;li&gt;Jakarta Authentication &lt;del&gt;Service Provider Interface for Containers&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Jakarta Concurrency Utlities&lt;/li&gt;
&lt;li&gt;Jakarta Server Pages&lt;/li&gt;
&lt;li&gt;Jakarta Connector Architecture&lt;/li&gt;
&lt;li&gt;Jakarta Dependency Injection&lt;/li&gt;
&lt;li&gt;Jakarta Expression Language&lt;/li&gt;
&lt;li&gt;Jakarta Message Service&lt;/li&gt;
&lt;li&gt;Jakarta Batch&lt;/li&gt;
&lt;li&gt;Jakarta &lt;del&gt;API for&lt;/del&gt; WebSocket&lt;/li&gt;
&lt;li&gt;Jakarta Transaction &lt;del&gt;API&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re going to couple renaming with an effort to capture proper scope statements (I’ll cover this in my next post). The Eclipse EE4J PMC Lead, Ivar Grimstad, has &lt;a href=&quot;https://www.agilejava.eu/2019/03/18/jakarta-ee-8-status/&quot;&gt;blogged about this recently&lt;/a&gt; and has created a &lt;a href=&quot;https://github.com/orgs/eclipse-ee4j/projects/11&quot;&gt;project board&lt;/a&gt; to track the specification and project renaming activity (as of this writing, it has only just been started, so watch that space). We’ll start reaching out to the “Eclipse Project for …”  teams shortly to start engaging this process. When we’ve collected all of the information (names and scopes), we’ll engage in a restructuring review per the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) and make it all happen (more on this later).&lt;/p&gt;
&lt;p&gt;Your input is requested. I’ll monitor comments on this post, but it would be better to collect your thoughts in the issues listed on the project board (after we’ve taken the step to create them, of course), on the &lt;a href=&quot;https://github.com/eclipse-ee4j/ee4j/issues/50&quot;&gt;related issue&lt;/a&gt;, or on the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/ee4j-pmc&quot;&gt;EE4J PMC’s mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Thu, 04 Apr 2019 14:17:23 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: New Release:  Python&lt;-&gt;Java Remote Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-4192025638966416820</guid>
	<link>http://eclipseecf.blogspot.com/2019/04/new-release-python-java-remote-services.html</link>
	<description>There is a new release (2.9.0) of the &lt;a href=&quot;https://github.com/ECF/Py4j-RemoteServicesProvider&quot;&gt;ECF distribution provider&lt;/a&gt; for &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project&quot;&gt;OSGi R7 Remote Services&lt;/a&gt; between Java and Python.&lt;br /&gt;&lt;br /&gt;This release has:&lt;br /&gt;&lt;br /&gt;An upgraded version of &lt;a href=&quot;https://www.py4j.org/&quot;&gt;Py4j&lt;/a&gt;&lt;br /&gt;An upgraded version of &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;Google Protocol Buffers&lt;/a&gt;&lt;br /&gt;Enhancements to the distribution provider based upon the improved Py4j and Protobuf libs&lt;br /&gt;&lt;br /&gt;In &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/08/osgi-remote-services-between-python-and.html&quot;&gt;this previous blog posting&lt;/a&gt; there are links to tutorials and examples showing how to use remote services between Python&amp;lt;-&amp;gt;Java.&lt;br /&gt;&lt;br /&gt;Python&amp;lt;-&amp;gt;Java remote services can be consumed or implemented in either Java or Python.</description>
	<pubDate>Thu, 04 Apr 2019 05:42:48 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Tanja Obradovic: How to participate in advancing Jakarta EE Specification: Technical and Collateral material related work</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6688 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/how-participate-advancing-jakarta-ee-specification-technical-and-collateral</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/ntDKfTQE_k7haiRm3hR_juSyUyLcSTHGy096zSBF_pYMb6URdzISoxze3MRKPzqtMNpMtPcg5lVz9VAzNLUH0z5ZxJzYfoAePMFgC2sEZ3OwdmWzVKTrlHu5wsw4W84m6lyeI0sT&quot; style=&quot;height: 219px; width: 624px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Technical Work&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We will need a lot of help on this front as well&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;o   Jakarta EE specifications: specification documents and APIs&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We have heard from members of the community some suggestions on what they need from the specification, but we can always use more. Get involved in the discussion on Github (&lt;a href=&quot;https://github.com/eclipse-ee4j/jakartaee-platform/issues&quot;&gt;https://github.com/eclipse-ee4j/jakartaee-platform/issues&lt;/a&gt;).&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;o   Jakarta EE TCK&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;It’s a goliath, inconvenient, and we want to slowly begin to break it up into separate TCKs for each specification. Not for the very first release of Jakarta EE, but we need to start planning and discussing the approach.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;o   Compatible Implementations&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;To make a final version of a specification alive we need specification implementations. Whether the implementation is hosted in Eclipse Foundation or not is not the focus, we need you to implement the specification.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/f6fah-CYgdOPLv1jyee9HuhJwbhEAnbp1ntN6YgCT4FTu9zn100i0JxZOwDL5nXd0arh9XI_rZCNgBk6an0n72WCuTnprR531aMsy_cICVUH9wutZIOtd5L0juPcQP8sBcOjE4Ty&quot; style=&quot;height: 209px; width: 597px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Collateral material related work&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;While we encourage everyone to participate in specification development, please keep in mind this isn’t limited to coding only. Of equal importance is the need for collateral material related to the specification(s). This includes documentation, presentations, videos, demos, examples, blogs, tech talks, etc. This is the type of content we can circulate through the community and use to educate and spread the news on the new specifications. Presenting the material on the conferences is yet another aspect where you can help out also!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee&quot;&gt;#JakartaEE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/javaee&quot;&gt;#JavaEE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/communitywork&quot;&gt;#CommunityWork&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/java-0&quot;&gt;#Java&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 03 Apr 2019 19:13:07 +0000</pubDate>
</item>

</channel>
</rss>
